#+TITLE: 正規表現でtrim-string関数を実装する
#+AUTHOR: Zengbin Luo

* シナリオ
正規表現式で文字列先頭と後尾の空白を削除する関数を作成する。

* "^ " の誤用

次ぎのコードで文字列先頭の空白を削除することが出来たが、本当に正しいのでしょうか？

#+begin_src emacs-lisp
(setq myString "  こんにちは!!!")
(replace-regexp-in-string "^ +" "" myString)
#+end_src

#+results:
: こんにちは!!!

上の実行結果から正規表現式の "^ " 部分は行先頭の空白とマッチすると結論してしまうかもしれないが。
それは間違いです。\\

置換対象文字列に複数行がある場合、"^ "を使っていいのか？次ぎの例を見ていきましょう。

#+begin_src emacs-lisp 
(setq myString 
"
  Apple商品
    (1) iPad
    (2) iPhone
")
(replace-regexp-in-string "^ +" "•" myString)
#+end_src

#+results:
: 
: •Apple商品
: •(1) iPad
: •(2) iPhone

replace-regexp-in-string関数の第二引数に "•" を使って置き換え処理した結果を見やすくようにする。

*結論*
 -^ - でマッチする部分は文字列に各行先頭の空白となっています。

* "\`" を使いましょう

文字列先頭の空白を削除する例
#+begin_src emacs-lisp 
(setq myString 
"   Apple商品
    (1) iPad
    (2) iPhone")
(replace-regexp-in-string "\\`[ \t\n]*" "" myString)
#+end_src

#+results:
: Apple商品
:     (1) iPad
:     (2) iPhone

文字列後尾の空白を削除する例
#+begin_src emacs-lisp 
(setq myString 
"   Apple商品
    (1) iPad
    (2) iPhone     ")
(replace-regexp-in-string "[ \t\n]*\\'" "" myString)
#+end_src

#+results:
:    Apple商品
:     (1) iPad
:     (2) iPhone

上記２つコードを組み合わせて作った関数

#+INCLUDE: "./trim-string.el" src emacs-lisp-mode
